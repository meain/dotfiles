name = "Coder"
description = "A coding assistant with access to various system functions"

system_prompt="""You are an intelligent coding assistant designed for efficient code analysis and modification.

Core Responsibilities:
1. Analyze requested tasks and files autonomously using available system functions
2. Execute necessary file operations and modifications without requiring confirmation
3. Provide concise, implementation-focused responses
4. Maintain context awareness of the codebase structure and environment

Task Execution Protocol:
1. Gather context using appropriate system functions (read_file, list_directory, etc.)
2. Process information and determine required actions
3. Execute modifications using write_file or other relevant functions
4. Return only essential feedback about completed actions

Environment Details:
- Operating System: {{$uname -o}}
- Working Directory: {{$pwd}}
- Today's Date: {{$date}}
- User: Abin Simon (meain), Senior Software Engineer specializing in Go
- Context: Limited to current directory and its subdirectories

Response Guidelines:
- Focus on direct, actionable answers
- Skip explanations unless explicitly requested
- Maintain awareness of file system boundaries
- Execute tasks autonomously using available functions

Project structure:
{{$tree -d ./}}

Remember, all user queries are to be answered based on the current project.
"""

## Read Webpage
[[functions]]
name = "read_webpage"
description = "Read the contents of a webpage"
command = "readable '{{url}}' | html2markdown"

[[functions.parameters]]
name = "url"
type = "string"
description = "URL of the website to read"
required = true

## Read File
[[functions]]
name = "read_file"
description = "Read the contents of a file"
command = "cat {{show_line_numbers}} {{file}}"
safe = true

[[functions.parameters]]
name = "file"
type = "string"
description = "Path to the file to read"
required = true

[[functions.parameters]]
name = "show_line_numbers"
type = "boolean"
description = "Should show line number"
required = false
format = "-n"

## Write File
[[functions]]
name = "write_file"
description = "Write to a file"
command = "tee {{file}}"
stdin = "{{content}}"

[[functions.parameters]]
name = "file"
type = "string"
description = "File to write"
required = true

[[functions.parameters]]
name = "content"
type = "string"
description = "Content to write"
required = true

## List Directory
[[functions]]
name = "list_directory"
description = "List files in a directory. You only have access to the files in the current and sub directory."
command = "ls ./{{directory}}"
safe = true

[[functions.parameters]]
name = "directory"
type = "string"
description = "Directory to list. All paths should be relative paths. It will be prefixed with `./`"
required = true

## Print Directory Tree
[[functions]]
name = "print_tree"
description = "Print tree of files and folders"
command = "tree ./{{directory}}"
safe = true

[[functions.parameters]]
name = "directory"
type = "string"
description = "Directory to print tree. All paths should be relative paths. It will be prefixed with `./`"
required = true

## Grep
[[functions]]
name = "search_for_text"
description = """Search for a regex pattern in project files. Limited to the top 300 results.
Use more precise queries if you need better results."""
command = "rg '{{search_pattern}}' ./{{directory}} | head -n 300"
safe = true

[[functions.parameters]]
name = "search_pattern"
type = "string"
description = "Pattern to search for"
required = true

[[functions.parameters]]
name = "directory"
type = "string"
description = "Directory or file to search in. All paths should be relative paths. It will be prefixed with `./`"
required = false

## Find file
[[functions]]
name = "find_files_by_name"
description = "Find a files in the current directory and subdirectories that match the given name."
command = "find . -name '{{search_pattern}}'"
safe = true

[[functions.parameters]]
name = "search_pattern"
type = "string"
description = "Pattern to search for"
required = true

## Search for symbols
[[functions]]
name = "search_symbols"
description = """
Find symbols (functions/types) in code from the specified directory and subdirectories.
Use this if you want to get function names. Works better with single words.

This will only tell you where the symbol is and you have to use
`read_file` to read the file to get the full content.
"""
command = ",symbol-search | grep ':{{kind}}:' | grep -i '{{search_pattern}}'"
pwd="{{directory}}"
safe = true

[[functions.parameters]]
name = "directory"
type = "string"
description = "Directory to search in. All paths should be relative paths. It will be prefixed with `./`"
required = false

[[functions.parameters]]
name = "kind"
type = "string"
description = "Kind of symbol to search for."
options = ["function", "type"]
required = true

[[functions.parameters]]
name = "search_pattern"
type = "string"
description = "Pattern to search for. Case insensitive"
required = true

## Move file (do we need copy file?)
[[functions]]
name = "move_file"
description = "Move a file to a new location"
command = "mv {{source}} {{destination}}"
safe = false

[[functions.parameters]]
name = "source"
type = "string"
description = "Source file to move"
required = true

[[functions.parameters]]
name = "destination"
type = "string"
description = "Destination path to move the file to"
required = true

## Run command
[[functions]]
name = "run_command"
description = "Run a command in the current directory"
command = "{{command}}"
safe = false

[[functions.parameters]]
name = "command"
type = "string"
description = "Command to run"
required = true