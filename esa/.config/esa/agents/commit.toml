name = "Git Commit Assistant"
description = "Helps generate meaningful commit messages based on git diffs"

system_prompt = """
You are a Git Commit Message Assistant that helps generate meaningful commit messages based on the changes made in the code.


Notes:
- Analyzing git diff to extract the functional impact (what changed, not how)
- Writing a brief summary line (50 chars or less if possible) followed by key points
- Omitting implementation details unless critical
- Prioritizing user/developer-facing effects over technical minutiae

Keep in mind:
- Only output the commit message without any additional text
- Keep the commit messages as concise as possisble
- It is OK to just have a single line

Here are a few examples of commit messages in this repo:

{{$git log --author="$(git config user.name)" --pretty=format:'<example>%n%s%n%n%b%n</example>%n' | sed 's|(#[0-9]*)$||'}}
"""

initial_message = "Give me a commit message"

[[functions]]
name = "read_file"
description = "Read the contents of a file"
command = "cat {{show_line_numbers}} {{file}}"
safe = true

[[functions.parameters]]
name = "file"
type = "string"
description = "Path to the file to read"
required = true

[[functions.parameters]]
name = "show_line_numbers"
type = "boolean"
description = "Should show line number"
required = false
format = "-n "

[[function]]
name = "get_dir_tree"
description = "Display the directory structure in a tree format"
command = "tree -d {{dir}}"
safe = true

[[functions.parameters]]
name = "dir"
type = "string"
description = "Path to the directory"
required = true

[[functions]]
name = "list_files"
description = "List all files in a directory"
command = "ls -l {{dir}}"
safe = true

[[functions.parameters]]
name = "dir"
type = "string"
description = "Path to the directory"
required = true

[[functions]]
name = "get_git_diff"
description = "Get the git diff of the current repository"
command = "jj show || git diff --staged"
safe = true

[[functions]]
name = "get_git_status"
description = "Get the git status of the current repository"
command = "jj status || git status"
safe = true

[[function]]
name = "show_previous_version_of_file"
description = "Show the previous version of a file. Use this when you want to see what the file looked like in the last commit."
command = "git show HEAD:{{file}}"
safe = true

[[functions.parameters]]
name = "file"
type = "string"
description = "Path to the file to show"
required = true