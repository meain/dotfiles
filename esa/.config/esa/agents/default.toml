name = "Esa"
description = "A professional assistant capable of performing various tasks using system functions"

system_prompt="""You are Esa, a professional assistant capable of performing various tasks. You will receive a task to complete and have access to different functions that you can use to help you accomplish the task.

When responding to tasks:
1. Analyze the task and determine if you need to use any functions to gather information.
2. If needed, make function calls to gather necessary information.
3. Process the information and formulate your response.
4. Provide only concise responses that directly address the task.

Additional notes:
- The person who will be asking you questions in Abin Simon aka meain
- Abin is a Senior Software Engineer working primary working with Golang
- If asked to open a website, you can use the search engine to find the website
- Use the calculator function for any mathematical calculations
- If asked for best, cheapest or anything like that, always perform a deep research

Other information:
- Date: {{$date '+%Y-%m-%d %A'}}
- OS: {{$uname}}
- Current directory: {{$pwd}}

Remember to keep your responses brief and to the point. Do not provide unnecessary explanations or elaborations unless specifically requested."""

## About me
[[functions]]
name = "retrieve_information_about_user"
description = """
Ask an assistant for information about the user.
You can use this if you need to know something about the user.
"""
command = "esa +mem {{query}}"
safe = true

[[functions.parameters]]
name = "query"
type = "string"
description = """
Query to ask the assistant about the user.

Query should be phrased like 'What is my ...' or 'Who am I ...' or 'What do I like ...'.
"""
required = true

[[functions]]
name = "store_information_about_user"
description = "Store information about the user in the assistant's memory"
command = "esa +mem '{{information}}'"
safe = false

[[functions.parameters]]
name = "information"
type = "string"
description = "Information to store about the user. Phrase it like 'I am ...' or 'I have been ...'"
required = true

## Set Alarm
[[functions]]
name = "set_alarm"
description = "Set an alarm on the system"
command = ",apple-alarm '{{time}}'"
safe = true

[[functions.parameters]]
name = "time"
type = "string"
description = "Time to set the alarm (HH:mm)"
required = true

## Get Date and Time
[[functions]]
name = "get_datetime"
description = "Get current date and time"
command = "date"
safe = true

## Delete Alarm
[[functions]]
name = "delete_alarm"
description = "Delete an alarm already based on time"
command = ",alarm-delete '{{time}}'"
safe = true

[[functions.parameters]]
name = "time"
type = "string"
description = "Time of the alarm to be deleted (HH:mm)"
required = true

## Open Website
[[functions]]
name = "open_website"
description = """Open a website in the default browser.
If the user asks to open a link, you can use this function."""
command = "open '{{url}}'"
safe = true

[[functions.parameters]]
name = "url"
type = "string"
description = "URL of the website to open"
required = true

## Read Webpage
[[functions]]
name = "get_webpage"
description = """Get the contents of a webpage.
This will pull down the webpage html, strips it down to the essentical content and returns you that."""
command = "readable '{{url}}' 2>/dev/null | html2markdown"
safe = true

[[functions.parameters]]
name = "url"
type = "string"
description = "URL of the website to read"
required = true

# Doing this as a separate small agents makes sure that one single
# agent will not have to fit unnecessary information into their
# context.
[[functions]]
name = "get_webpage_summary"
description = """Get the summary of contents of a webpage."""
command = "esa +summarizer '{{url}}'"
safe = true

[[functions.parameters]]
name = "url"
type = "string"
description = "URL of the website to summarize"
required = true

## Adjust Brightness
[[functions]]
name = "adjust_brightness"
description = "Adjust screen brightness"
command = ",adjust-brightness '{{level}}'"
safe = true

[[functions.parameters]]
name = "level"
type = "string"
description = "Direction to adjust brightness (increase/decrease)"
required = true

## Get Weather
[[functions]]
name = "get_weather"
description = "Get weather forecast for a location"
command = "curl -s 'wttr.in/{{location}}?format=j2'"
safe = true

[[functions.parameters]]
name = "location"
type = "string"
description = "Location to check weather for (If none is provided, current location is used)"
required = false

## Send Email
[[functions]]
name = "send_email"
description = "Send an email"
command = ",send-email '{{recipient}}' '{{subject}}' '{{body}}'"

[[functions.parameters]]
name = "recipient"
type = "string"
description = "Recipient email address"
required = true

[[functions.parameters]]
name = "subject"
type = "string"
description = "Email subject (with single quotes escaped)"
required = true

[[functions.parameters]]
name = "body"
type = "string"
description = "Email body (with single quotes escaped)"
required = true

## Send Notification
[[functions]]
name = "send_notification"
description = "Send a system notification"
command = "notify '{{title}}' '{{message}}'"
safe = true

[[functions.parameters]]
name = "title"
type = "string"
description = "Title of the notification (with single quotes escaped)"
required = true

[[functions.parameters]]
name = "message"
type = "string"
description = "Message content of the notification"
required = true

## List Directory
[[functions]]
name = "list_directory"
description = "List files in a directory."
command = "ls ./{{directory}}"
safe = true

[[functions.parameters]]
name = "directory"
type = "string"
description = "Directory to list. All paths should be relative paths. It will be prefixed with `./`"
required = true

## Print Directory Tree
[[functions]]
name = "print_tree"
description = "Print directory tree (only folders)."
command = "tree -d ./{{directory}}"
safe = true

[[functions.parameters]]
name = "directory"
type = "string"
description = "Directory to print tree. All paths should be relative paths. It will be prefixed with `./`"
required = true

## Grep
[[functions]]
name = "search_pattern"
description = "Search for a pattern in files. The underlying search tools is ripgrep"
command = "rg '{{pattern}}' ./{{directory}} | head -n 100"
safe = true

[[functions.parameters]]
name = "pattern"
type = "string"
description = "Pattern to search for"
required = true

[[functions.parameters]]
name = "context"
type = "string"
description = "Context lines to show"
required = false
format = "--context %d"

[[functions.parameters]]
name = "directory"
type = "string"
description = "Directory or file to search in. All paths should be relative paths. It will be prefixed with `./`"
required = true

## Refer
[[functions]]
name = "refer"
description = """Refer is a tool that lets you perform a vector search on a documents in the directory.
It can be performed if there is a .referdb file in the directory.
This can be used to semantically search for things in the documents.
It returns you a list of files that might contain relevant data."""
command = "refer search '{{query}}'"
safe = true

[[functions.parameters]]
name = "query"
type = "string"
description = "Query to search for in the referdb file"
required = true

## Calendar
[[functions]]
name = "list_events"
description = """List events in the calendar from today morning to +n days.
You can use the current date/time to filter out events that is already completed.
If asked for events in a particular time span, filter and only show those from the returned list."""
command = "icalbuddy eventsToday+{{days}}"
safe = true

[[functions.parameters]]
name = "days"
type = "string"
description = "Number of days to list events for. Use 0 for today."
required = true

## DDG search
[[functions]]
name = "get_search_results"
description = """Get search results from DuckDuckGo.
If you want the information within each of the pages in the response, use get_webpage or get_webpage_summary functions."""
# https://github.com/jarun/ddgr/issues/159#issuecomment-1862655714
command = "ddgr --noua --json '{{query}}'"
safe = true

[[functions.parameters]]
name = "query"
type = "string"
description = "Query to search for"
required = true

## Calculartor
[[functions]]
name = "calculate"
description = "Perform mathematical calculations"
command = "bc <<< 'scale=2; {{expression}}'"
safe = true

[[functions.parameters]]
name = "expression"
type = "string"
description = "Mathematical expression to calculate (eg: 2+2)"
required = true
