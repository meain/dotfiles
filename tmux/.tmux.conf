#  Tmux Plugins
set -g @plugin 'tmux-plugins/tpm'

# status bar colors
set-option -g status-style "fg=default,bg=default"

# highlight active pane
set -g window-style 'fg=default,bg=default'
set -g window-active-style 'fg=default,bg=default'

# status bar styling
set-window-option -g window-status-style "fg=default,bg=default"
set-window-option -g window-status-current-style "fg=color255,bg=green"
set-window-option -g window-status-bell-style "fg=olive,bg=default"
set-window-option -g window-status-activity-style "fg=olive,bg=default"

# pane styling
set-option -g pane-border-style "fg=colour252,bg=default"
set-option -g pane-active-border-style "fg=cyan,bg=default"
set-option -g display-panes-colour default
set-option -g display-panes-active-colour red
set-option -g mode-style "fg=black,bg=colour116"
set-option -g message-style "fg=red,bg=default"

# pane number display
set-option -g display-panes-active-colour colour33
set-option -g display-panes-colour colour166

# pane borders
set -g pane-border-status off
set -g pane-border-format '#[bold] #{pane_current_command} | #(git rev-parse --abbrev-ref HEAD) '

# Status line
set -g status-interval 30
set -g status-justify left
set -g status-left-length 40
set -g status-right-length 140
set-option -g status-position bottom
tm_session_name="#{session_group}" # since we are attaching single session to multiple teminals #S is not the best idea
tm_load="#(,tmux-load)"
tm_fullscreen="#(,tmux-iszoomed)"
set -g status-right '#[fg=colour001]'$tm_load' #[fg=yellow]'$tm_fullscreen' #[fg=green]'$tm_session_name' '
set -g status-left ' '

# binding stuff
unbind C-b
set-option -g prefix M-f
bind-key M-f send-prefix

# show just the command name
setw -g window-status-current-format ' #W[#{b:pane_current_path}] '
set -g window-status-format '#W(#{b:pane_current_path})'

# split
bind -n M-v split-window -h -c "#{pane_current_path}"
bind -n M-b split-window -v -c "#{pane_current_path}"

# n and p to switch windows
bind -n M-n previous-window\; refresh-client -S
bind -n M-m next-window\; refresh-client -S

# switch windows meta+number
bind 1 select-window -t 1
bind 2 select-window -t 2
bind 3 select-window -t 3
bind 4 select-window -t 4
bind 5 select-window -t 5
bind 6 select-window -t 6
bind 7 select-window -t 7
bind 8 select-window -t 8
bind 9 select-window -t 9

# Break pane and move to new window
bind ` break-pane

# Swap pane
bind-key Right swap-pane -D  # swap current pane with the next one
bind-key Left swap-pane -U  # swap current pane with the previous one

# Change window order
bind-key -n M-z swap-window -t -1 \; previous-window
bind-key -n M-x swap-window -t +1 \; next-window

# Zoom pane
bind f resize-pane -Z\; refresh-client -S

# Kill pane
bind-key -n M-w kill-pane

# Go to previous pane
bind-key -n M-u last-window

# Easier session switching
bind-key -n M-o switch-client -l

# Kill tmux session
bind 0 kill-session

# Enable mouse input
set -g mouse on

# Switch to another session on destroy
set -g destroy-unattached off

# Start numbering at 1
set -g base-index 1
setw -g pane-base-index 1

# Renumber windows
set -g renumber-windows on

#  Enable focus events
set -g focus-events on

# Show tmux messages for 5 seconds
set -g display-time 5000

# Increase history size
set -g history-limit 50000

# Allows for faster key repetition
set -s escape-time 0

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
# Combined with using `tmux new-session -t alreadyExistingSessionName -s newSessionName`
# we can have two views into the same session viewing different windows
setw -g aggressive-resize on

# Activity monitoring
setw -g monitor-activity on
set -g visual-activity off
# set-option -g bell-action none

# switch between modes
bind-key -n M-1 select-layout even-horizontal
bind-key -n M-2 select-layout even-vertical
bind-key -n M-3 select-layout main-horizontal
bind-key -n M-4 select-layout main-vertical
bind-key -n M-5 select-layout tiled

# Join a pane; enter the source window (and, optionally, pane)
# ":1" or ":1.1"
bind-key J choose-tree -Zw "join-pane -s '%%'"
# Send a pane to another window; enter the destination window
# ":1" or "sessionName.:1"
bind-key S choose-tree -Zw "join-pane -t '%%'"

# Move to another window
bind-key W command-prompt -p "Session name to move to:" "move-window -t '%%'"

# Creating new window
bind-key -n M-c new-window

# Quick detach
bind-key -n M-d detach

# Switch session
bind-key M-s choose-tree -Zs

# Resize panes
bind-key -n M-H resize-pane -L 5
bind-key -n M-J resize-pane -D 5
bind-key -n M-K resize-pane -U 5
bind-key -n M-L resize-pane -R 5

# Rename session
bind-key . command-prompt -p "Session name:" "rename-session '%%'"

# reload config
bind r source-file ~/.tmux.conf \; display-message "Tmux configuration reloaded."

# quick copy mode
bind-key -n M-[ copy-mode

# search for prompt (using non-breaking sapce)
bind-key P copy-mode\; send-keys -X start-of-line\; send-keys -X search-backward "Â "

# set clipboard on
set-option -g set-clipboard external

# vim mode and copy keybindings
setw -g mode-keys vi # list keybindings: tmux list-keys -T copy-mode-vi
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'r' send-keys -X rectangle-toggle
bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi "Y" send-keys -X copy-pipe-and-cancel "tmux paste-buffer"
bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi MouseDown3Pane select-pane  # right mouse button (to highlight sutff)
bind-key -T copy-mode-vi MouseDrag3Pane select-pane \; send-keys -X begin-selection
unbind-key -T copy-mode-vi MouseDragEnd3Pane

# Seamless trasition between vim and tmux
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# bind-key -n M-h if-shell "$is_vim" "send-keys M-h"  "select-pane -L"
# bind-key -n M-j if-shell "$is_vim" "send-keys M-j"  "select-pane -D"
# bind-key -n M-k if-shell "$is_vim" "send-keys M-k"  "select-pane -U"
# bind-key -n M-l if-shell "$is_vim" "send-keys M-l"  "select-pane -R"
bind-key -n M-h select-pane -L
bind-key -n M-j select-pane -D
bind-key -n M-k select-pane -U
bind-key -n M-l select-pane -R

# Popup stuff
bind-key i popup -d '#{pane_current_path}' -xC -yC -w50% -h30% -E "ping meain.io"
bind-key h popup -d '#{pane_current_path}' -xC -yC -w80% -h80% -E "htop"
bind-key l popup -d '#{pane_current_path}' -xC -yC -w50% -h30% -E ",tmux-open-url"
bind-key k popup -d '#{pane_current_path}' -xC -yC -w50% -h30% -E ",tmux-copy"
# Custom version at https://github.com/meain/tz
bind-key t popup -d '#{pane_current_path}' -xC -yC -w50% -h50% -E "TZ_LIST='' $HOME/.local/share/go/bin/tz -light"
bind-key -n M-s popup -d '#{pane_current_path}' -h90% -w90%  -E "lazyjj || lazygit"

bind-key j run-shell ',popup-tmux single'
bind-key M-j run-shell ',popup-tmux master'
bind-key -n M-\; run-shell ',popup-tmux folder'

bind -n DoubleClick1Pane run-shell ",tmux-popup-opener '#{mouse_word}' '#{pane_current_path}'"

# Plugins #

# source all tmux plugins
run '~/.tmux/plugins/tpm/tpm'
