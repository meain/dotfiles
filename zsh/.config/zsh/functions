#! /bin/sh

# Functions that need cd, exit or source

tmp() {
    base="/tmp/workspaces"
    repo=""
    if [ -n "$1" ]; then
        case "$1" in
        https://* | git@* | *.git)
            repo="$1"
            ;;
        *)
            ls -t $base | fzf --preview "tree -L 3 $base/{}" |
                xargs -r -I {} cd "$base/{}"
            return 0
            ;;
        esac
    fi

    r="$base/$(xxd -l3 -ps /dev/urandom)"
    mkdir -p "$r" && cd "$r"
    echo "Created temporary directory $(basename "$r")"

    if [ -n "$repo" ]; then
        jj git clone "$repo" && cd *
    else
        jj git init --colocate
    fi
}

# cd, but use lf to choose dir
rcd() {
    tmp="$(mktemp)"
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        \rm -f "$tmp"
        if [ -d "$dir" ]; then
            if [ "$dir" != "$(pwd)" ]; then
                cd "$dir" || return 1
            fi
        fi
    fi
}

# Go to root of project
r() {
    cd "$(git rev-parse --show-toplevel 2>/dev/null)" || return 1
}

take() {
    mkdir -p "$1" && cd "$1" || return 1
}

cssh() {
    [ -z "$1" ] && HOST=$(grep -E "^Host" "$HOME/.ssh/config" | sed 's/^Host //' | fzf) || HOST="$1"
    [ -z "$HOST" ] && echo "No host specified" && return 1
    [ -n "$TMUX" ] && tmux select-pane -P bg=colour195
    [ -z "$1" ] && ssh "$HOST" || ssh "$@"
    tmux selectp -P default
}
compdef _ssh cssh=ssh
alias ssh=cssh

cmosh() {
    [ -z "$1" ] && HOST=$(grep -E "^Host" "$HOME/.ssh/config" | sed 's/^Host //' | fzf) || HOST="$1"
    [ -z "$HOST" ] && echo "No host specified" && return 1
    [ -n "$TMUX" ] && tmux select-pane -P bg=colour195
    [ -z "$1" ] && mosh "$HOST" || mosh "$@"
    tmux selectp -P default
}
compdef _mosh cmosh=mosh
alias mosh=cmosh

q() {
    [ -n "$IN_NIX_SHELL" ] && exit
    [ -z "$TMUX" ] && exit
    PANES="$(tmux list-panes | wc -l | sed 's/ //g')"
    WINDOWS="$(tmux list-windows | wc -l | sed 's/ //g')"
    CURRENT_PANE="$(tmux display-message -p -F "#{session_name}")"
    [ -z "$TMUX_PANE" ] && exit                                         # tmux popup
    [ -n "$NVIM_LISTEN_ADDRESS" ] && exit                               # nvim popup
    echo "$CURRENT_PANE" | grep ".*popup" && tmux detach-client && exit # floating one

    # switch to last non floating tmux client if all windows in the
    # session are closed
    if [ "$PANES" = "1" ] && [ "$WINDOWS" = "1" ]; then
        tmux ls | cut -d':' -f1 |
            grep -vE '^floating-' | grep -vE '^_run_cmd' |
            grep -v "$(tmux display-message -p '#S')" |
            head -n1 | xargs tmux switch-client -t
        exit
    else
        exit
    fi
}

m() {
    prev_dir="$(pwd)"
    r >/dev/null

    if [ ! -d .mscripts ]; then
        echo "Unable to find .mscripts"
        cd "$prev_dir" >/dev/null || return 1
        return 1
    fi

    script="$1"
    [ -n "$1" ] && shift

    # Need the funky find command below as we want to find all files or symlinks
    # \( ... \) groups expressions for logical precedence (escaped for the shell);
    # -type f: regular files; -type l: symlinks; -o: OR; -perm /111: any executable bit set
    # Also need the `/` after .mscripts to ensure symlinks to .mscripts are also used
    mscript="$(find .mscripts/ \( -type f -o -type l \) -perm /111 |
        tail -n+2 | xargs -n1 basename |
        fzf --query "$script" -1)"

    if [ -z "$mscript" ]; then
        echo "No mscript available for $script"
        cd "$prev_dir" >/dev/null || return 1
        return 1
    fi

    eval .mscripts/"$mscript" $*
    cd "$prev_dir" >/dev/null || return 1
}

mm() {
    r >/dev/null
    trap popd 1 2 3 6 >/dev/null

    if [ ! -f .mscripts/default ]; then
        echo "Unable to find default mscript" && return 1
    fi

    .mscripts/default "$@"
}

# python venv setup (need to be function as we have to source)
venv() {
    DEFAULT_VENV_PYTHON_VERSION=${DEFAULT_VENV_PYTHON_VERSION:-"3.6.6"}
    PYENV_ROOT=${PYENV_ROOT:-"$HOME/.pyenv"}
    if [ -z "$VENV_HOME" ]; then
        if [ -n "$WORKON_HOME" ]; then
            VENV_HOME="$WORKON_HOME"
        else
            VENV_HOME="$HOME/.cache/virtual_envs"
        fi
    fi

    create() {
        # get name first
        if [ -z "$1" ]; then
            printf "Virtualenv name (%s): " "$(basename "$(pwd)")"
            read -r
            if [ -z "$REPLY" ]; then
                VIRTUALENVNAME="$(basename "$(pwd)")"
            else
                VIRTUALENVNAME="$REPLY"
            fi
        else
            VIRTUALENVNAME=$1
        fi

        # select from available versions
        PYVERSION=$(pyenv versions | {
            echo "  Default ($DEFAULT_VENV_PYTHON_VERSION)"
            tail -n +2 | grep -v "$DEFAULT_VENV_PYTHON_VERSION"
            echo '  Other ( Install from pyenv )'
        } | fzf --no-sort | sed 's/^ *//')
        [ -z "$PYVERSION" ] && return 0

        # install if not available
        if [ "$PYVERSION" = 'Other ( Install from pyenv )' ]; then
            PYVERSION=$(pyenv install -l | tail -n +2 | fzf --no-sort | sed 's/^ *//')
            [ -z "$PYVERSION" ] && return 0
            pyenv install "$PYVERSION"
        elif [ "$PYVERSION" = "Default ($DEFAULT_VENV_PYTHON_VERSION)" ]; then
            PYVERSION=$DEFAULT_VENV_PYTHON_VERSION
        fi
        PYNAME=$(readlink "$PYENV_ROOT/versions/$PYVERSION/bin/python")

        [ -z "$PYVERSION" ] && return 0

        echo "Creating new virtualenv at $VENV_HOME/$VIRTUALENVNAME"
        virtualenv "$VENV_HOME/$VIRTUALENVNAME" -p "$PYENV_ROOT/versions/$PYVERSION/bin/$PYNAME" &&
            . "$VENV_HOME/$VIRTUALENVNAME/bin/activate"
    }

    activate() {
        VENVNAME=$({
            \ls -t "$VENV_HOME" | grep "$(basename "$(pwd)")"
            \ls -t "$VENV_HOME" | grep -v "$(basename "$(pwd)")"
        } | fzf --height 30% --layout=reverse --query="$*")
        [ -n "$VENVNAME" ] && . "$VENV_HOME/$VENVNAME/bin/activate"
    }

    remove() {
        VENVNAME=$(\ls -t "$VENV_HOME" | fzf --height 30% --layout=reverse --query="$*")
        [ -z "$VENVNAME" ] && return 0
        printf "Remove %s (y/N): " "$VENV_HOME/$VENVNAME"
        read -r
        [ "y" = "$REPLY" ] && rm -rf "$VENV_HOME/$VENVNAME"
    }

    help() {
        echo "venv - easily manage virtualenvs in pyenv"
        echo "Options: create, activate, remove"
    }

    [ -n "$1" ] && option="$1" && shift
    case "$option" in
    "create") create "$*" ;;
    "activate") activate "$*" ;;
    "remove") remove "$*" ;;
    "c") create "$*" ;;
    "a") activate "$*" ;;
    "r") remove "$*" ;;
    *) help ;;
    esac
}

# make clear not delete scrollback
# https://superuser.com/a/1667623/328228
if echo "$OSTYPE" | grep -qv darwin; then
    clear() (
        if [ "$#" -ne 0 ]; then
            command clear "$@"
            exit
        fi
        h="$(tput lines 2>/dev/null)"
        if [ "$?" -eq 0 ]; then
            until [ "$h" -le 1 ]; do
                printf '\n'
                h=$((h - 1))
            done
        fi
        command clear -x
    )
fi

hashdir() {
    [ -z "$1" ] && echo "Pass hash to use for dir" && return 1
    hash -d "$1"="$(pwd)"
    echo hash -d "$1"=\""$(pwd)"\" >>"$HOME/.local/share/zsh/.zsh_dir_hashes"
}

er() {
    entry="$(fd | fzf)"
    [ -f "$entry" ] && cd "$(dirname "$entry")" || return 1
    [ -d "$entry" ] && cd "$entry" || return 1
}

# jump backwards from cwd path
# https://news.ycombinator.com/item?id=45684759
dc() {
    cd "${PWD%/$1/*}/$1/" 2>/dev/null || echo "Directory not found: $1"
}

# Create a tmp dir, unzip file into it, cd into it
showme() {
    [ -z "$1" ] && echo "Pass file to show" && return 1
    tmp="$(mktemp -d)"
    extension="${1##*.}"
    if [ "$extension" = "zip" ]; then
        unzip "$1" -d "$tmp"
    elif [ "$extension" = "tar" ]; then
        tar -xvf "$1" -C "$tmp"
    elif [ "$extension" = "gz" ]; then
        tar -xzf "$1" -C "$tmp"
    else
        echo "Unknown extension $extension" && return 1
    fi

    cd "$tmp" || return 1
}

# Need to be a function to capture exit code
boop () {
  local last="$?"
  if [[ "$last" == '0' ]]; then
    ,make-noise notify
  else
    ,make-noise error
  fi
  $(exit "$last")
}

# Small functions (these are ideally aliases, but need args)

eout() {
    esa --show-output "${1:-1}" | glow -p
}

eoh() {
    esa --show-output "${1:-1}" | ,markdown-to-html
}